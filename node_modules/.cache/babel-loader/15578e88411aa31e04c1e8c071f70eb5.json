{"ast":null,"code":"var _jsxFileName = \"/Users/laporte/ETH-NFT-game/nft-game-starter-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport myEpicGame from './utils/MyEpicGame.json';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css'; // SelectCharacter に入っているファイルをインポートします。\n\nimport SelectCharacter from './Components/SelectCharacter';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'dongri727';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null); // characterNFT と setCharacterNFT を初期化します。\n\n  const [characterNFT, setCharacterNFT] = useState(null); // ロード状態を初期化します。\n\n  const [isLoading, setIsLoading] = useState(false); // ユーザーがRinkeby Network に接続されているか確認します。\n  // '4' は Rinkeby のネットワークコードです。\n\n  const checkNetwork = async () => {\n    try {\n      if (window.ethereum.networkVersion !== '4') {\n        alert(\"Rinkeby Test Network に接続してください!\");\n      } else {\n        console.log(\"Rinkeby に接続されています.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ユーザーがMetaMaskを持っているか確認します。\n\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!'); // 次の行でreturnを使用するため、ここでisLoadingを設定します。\n\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum); // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n\n        const accounts = await ethereum.request({\n          method: 'eth_accounts'\n        }); // もしアカウントが一つでも存在したら、以下を実行。\n\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account); // currentAccountにユーザーのアカウントアドレスを格納\n\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    } //すべての関数ロジックの後に、state プロパティを解放します。\n\n\n    setIsLoading(false);\n  }; // レンダリングメソッド\n\n\n  const renderContent = () => {\n    // アプリがロード中の場合は、LoadingIndicatorをレンダリングします。\n    if (isLoading) {\n      return /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this);\n    } // シナリオ1.\n    // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n\n\n    if (!currentAccount) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://i.imgur.com/wxuj1Ou.png\",\n          alt: \"NOBODY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button connect-wallet-button\",\n          onClick: connectWalletAction,\n          children: \"Connect Wallet to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this); // シナリオ2.\n      // ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\n    } else if (currentAccount && !characterNFT) {\n      return /*#__PURE__*/_jsxDEV(SelectCharacter, {\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 12\n      }, this); // シナリオ3.\n      // ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n      // Area でボスと戦います。\n    } else if (currentAccount && characterNFT) {\n      return /*#__PURE__*/_jsxDEV(Arena, {\n        characterNFT: characterNFT,\n        setCharacterNFT: setCharacterNFT\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 10\n      }, this);\n    }\n  }; // connectWallet メソッドを実装します。\n\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      } // ユーザーがウォレットを持っているか確認します。\n\n\n      checkIfWalletIsConnected(); // ウォレットアドレスに対してアクセスをリクエストしています。\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      }); // ウォレットアドレスを currentAccount に紐付けます。\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]); // ユーザーが Rinkeby に接続されているか確認します。\n\n      checkNetwork();\n    } catch (error) {\n      console.log(error);\n    }\n  }; // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n\n  useEffect(() => {\n    // ページがロードされたら、即座にロード状態を設定するようにします。\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []); // ページがロードされたときに useEffect()内の関数が呼び出されます。\n\n  useEffect(() => {\n    // スマートコントラクトを呼び出す関数です。\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicGame.abi, signer);\n      const txn = await gameContract.checkIfUserHasNFT();\n\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      } // ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\n\n\n      setIsLoading(false);\n    }; // 接続されたウォレットがある場合のみ、下記を実行します。\n\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"\\u26A1\\uFE0F METAVERSE GAME \\u26A1\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"\\u967D\\u6C17\\u767A\\u51E6\\u3001\\u91D1\\u77F3\\u4EA6\\u900F\\u3002\\u7CBE\\u795E\\u4E00\\u5230\\u3001\\u4F55\\u4E8B\\u4E0D\\u6210\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), renderContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"WfKwg0DIevkC/Lp/DKpo5wNTmQM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/laporte/ETH-NFT-game/nft-game-starter-project/src/App.js"],"names":["myEpicGame","React","useEffect","useState","SelectCharacter","ethers","CONTRACT_ADDRESS","transformCharacterData","Arena","LoadingIndicator","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","characterNFT","setCharacterNFT","isLoading","setIsLoading","checkNetwork","window","ethereum","networkVersion","alert","console","log","error","checkIfWalletIsConnected","accounts","request","method","length","account","renderContent","connectWalletAction","fetchNFTMetadata","provider","providers","Web3Provider","signer","getSigner","gameContract","Contract","abi","txn","checkIfUserHasNFT","name","twitterLogo"],"mappings":"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","sourcesContent":["import myEpicGame from './utils/MyEpicGame.json';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n// SelectCharacter に入っているファイルをインポートします。\nimport SelectCharacter from './Components/SelectCharacter';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\n// Constants\nconst TWITTER_HANDLE = 'dongri727';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n    // ユーザーのウォレットアドレスを格納するために使用する状態変数を定義します。\n  const [currentAccount, setCurrentAccount] = useState(null);\n    // characterNFT と setCharacterNFT を初期化します。\n  const [characterNFT, setCharacterNFT] = useState(null);\n  // ロード状態を初期化します。\n  const [isLoading, setIsLoading] = useState(false);\n\n  // ユーザーがRinkeby Network に接続されているか確認します。\n// '4' は Rinkeby のネットワークコードです。\nconst checkNetwork = async () => {\n\ttry {\n\t\tif (window.ethereum.networkVersion !== '4') {\n\t\talert(\"Rinkeby Test Network に接続してください!\")\n\t\t} else {\n\t\tconsole.log(\"Rinkeby に接続されています.\")\n\t\t}\n\t} catch(error) {\n\t\tconsole.log(error)\n\t}\n}\n\n    // ユーザーがMetaMaskを持っているか確認します。\n  const checkIfWalletIsConnected = async() => {\n    try{\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n\n        // 次の行でreturnを使用するため、ここでisLoadingを設定します。\n        setIsLoading(false);  \n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n        \n        // accountsにWEBサイトを訪れたユーザーのウォレットアカウントを格納します。\n        // （複数持っている場合も加味、よって account's' と変数を定義している）\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        // もしアカウントが一つでも存在したら、以下を実行。\n        if (accounts.length !== 0) {\n          // accountという変数にユーザーの1つ目（=Javascriptでいう0番目）のアドレスを格納\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          // currentAccountにユーザーのアカウントアドレスを格納\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n       //すべての関数ロジックの後に、state プロパティを解放します。\n      setIsLoading(false);\n  };\n    // レンダリングメソッド\nconst renderContent = () => {\n  // アプリがロード中の場合は、LoadingIndicatorをレンダリングします。\n  if (isLoading) {\n\t  return <LoadingIndicator />;\n}\n  // シナリオ1.\n  // ユーザーがWEBアプリにログインしていない場合、WEBアプリ上に、\"Connect Wallet to Get Started\" ボタンを表示します。\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img\n            src=\"https://i.imgur.com/wxuj1Ou.png\"\n            alt=\"NOBODY\"\n        />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet to Get Started\n        </button>\n      </div>\n    );\n  \t// シナリオ2.\n\t// ユーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っていない場合、WEBアプリ上に、を表示します。\n  } else if (currentAccount && !characterNFT) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n  // シナリオ3.\n\t// ーザーはWEBアプリにログインしており、かつ NFT キャラクターを持っている場合、\n\t// Area でボスと戦います。\n\t} else if (currentAccount && characterNFT) {\n\t\treturn <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT}/>;\n\t}\n};\n    // connectWallet メソッドを実装します。\n    const connectWalletAction = async () => {\n      try {\n        const { ethereum } = window;\n        if (!ethereum) {\n          alert('Get MetaMask!');\n          return;\n        }\n        // ユーザーがウォレットを持っているか確認します。\n        checkIfWalletIsConnected();\n\n        // ウォレットアドレスに対してアクセスをリクエストしています。\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        // ウォレットアドレスを currentAccount に紐付けます。\n        console.log('Connected', accounts[0]);\n        setCurrentAccount(accounts[0]);\n        // ユーザーが Rinkeby に接続されているか確認します。\n        checkNetwork();\n    \n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n      // ページがロードされたら、即座にロード状態を設定するようにします。\n\t    setIsLoading(true);\n      checkIfWalletIsConnected();\n  }, []);\n  // ページがロードされたときに useEffect()内の関数が呼び出されます。\n  useEffect(() => {\n  // スマートコントラクトを呼び出す関数です。\n  const fetchNFTMetadata = async () => {\n    console.log('Checking for Character NFT on address:', currentAccount);\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGame.abi,\n      signer\n    );\n\n    const txn = await gameContract.checkIfUserHasNFT();\n    if (txn.name) {\n      console.log('User has character NFT');\n      setCharacterNFT(transformCharacterData(txn));\n    } else {\n      console.log('No character NFT found');\n    }\n    \t// ユーザーが保持しているNFTの確認が完了したら、ロード状態を false に設定します。\n\t  setIsLoading(false);\n  };\n\n  // 接続されたウォレットがある場合のみ、下記を実行します。\n  if (currentAccount) {\n    console.log('CurrentAccount:', currentAccount);\n    fetchNFTMetadata();\n  }\n}, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n        <p className=\"header gradient-text\">⚡️ METAVERSE GAME ⚡️</p>\n          <p className=\"sub-text\">陽気発処、金石亦透。精神一到、何事不成✨</p>\n          {/* renderContent メソッドを呼び出します。*/}\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}